QUESTION: while trying to find size of an array inside main function i used sizeof(array_name)/sizeof(arrays_datatype). the array was fifth[10]={1}. and i got the size as 10, but when i created a function to find the size of array, using same formula, then i got size of array as 1, why?

The difference in behavior is due to the way arrays are handled when passed to a function in C++.

Case 1: Inside main()
When you declare an array inside main() like this:

cpp
Copy
Edit
int fifth[10] = {1};  // An array of size 10
cout << sizeof(fifth) / sizeof(int) << endl;
sizeof(fifth) gives the total size of the array in bytes (10 * 4 = 40 bytes, assuming int is 4 bytes).
sizeof(int) gives the size of an integer (typically 4 bytes).
The division gives 40 / 4 = 10, correctly indicating the number of elements.
Case 2: Inside a Function
When you pass an array to a function like this:

cpp
Copy
Edit
void findSize(int arr[]) {
    cout << sizeof(arr) / sizeof(int) << endl;
}
And call it as:

cpp
Copy
Edit
findSize(fifth);
What actually happens is not a full array being passed, but rather a pointer to the first element of the array. In function parameters, an array decays into a pointer. This means:

arr inside the function is treated as int* arr, not int arr[10].
sizeof(arr) now gives the size of the pointer, not the size of the full array.
On a 32-bit system, sizeof(arr) would be 4 bytes.
On a 64-bit system, sizeof(arr) would be 8 bytes.
sizeof(int) is still 4 bytes.
Therefore, sizeof(arr) / sizeof(int) evaluates to 4 / 4 = 1 (or 8 / 4 = 2 in a 64-bit system), which is incorrect for the actual array size.
How to Correctly Find the Array Size Inside a Function?
Pass the size of the array explicitly:
cpp
Copy
Edit
void findSize(int arr[], int size) {
    cout << "Size of array: " << size << endl;
}

int main() {
    int fifth[10] = {1};
    findSize(fifth, sizeof(fifth) / sizeof(int));  // Pass array size explicitly
}
Use std::vector<int> instead of a raw array (recommended for dynamic handling):
cpp
Copy
Edit
void findSize(vector<int> arr) {
    cout << "Size of array: " << arr.size() << endl;
}

int main() {
    vector<int> fifth(10, 1);
    findSize(fifth);
}
This method ensures that the correct size is used, as std::vector manages its own size dynamically.

Summary
Inside main(), sizeof(array) / sizeof(datatype) works because the array is not decayed to a pointer.
Inside a function, the array decays into a pointer, and sizeof(arr) gives the size of the pointer, not the array.
To get the correct size inside a function, pass the size as an additional parameter or use std::vector.